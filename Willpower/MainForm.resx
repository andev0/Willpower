<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="Stopwatch.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAAAAAAAEAIAD+GwAAFgAAAIlQTkcNChoKAAAADUlIRFIAAAEAAAABAAgEAAAA9ntg7QAAG8VJ
        REFUeNrtXXlcFEf2f8AEES/CIuuBZkSiRtF437DEAy9URBNNVCTGuFmzRuIqxiMKqya6xqAxXjFGDUFi
        PABBjQdBRDxARCUgCthj4OcdRUWjoNTvj2HonpmemZ6+pnqoV58P9Our3tT71nuvznZAQKg2kyMpAgIA
        QgQAhAgACBEAECIAIEQAQIgAgBABACECAEIEAIQIAOyA/rmg+97pC3LcibpZCNl9apEOFCBAQC2cZv+/
        1tpk9z9wSlS1+hEgoAI3E5XXKgB8+glD/QgQUI2zjquJ2msJAPZ0N1B/NQjWDyeK1yUH+50QQjl6F4Oa
        9ZJm3J7dc0n8Z+etgHG7TagfQL1nXOuUC25E/XbcCpi+gNX867mCVeOIC7DTn5XQ2aL6ESCg/hVBYgC7
        tGsuV5634XSjpn1+3ggSA9gZjV393Jnjrer89vXzUnxIDGBHKa43J/Ov5wp2+JMYwE7SOQ+r1Y8AARUe
        XjsB4BRpZxatW0q5L4/H3M60e+A07HTt8wB2BoCQ6HPdwY3Xo25n2/75yvBTJAZQcPr3HF7mn+EIlk0i
        zUDFUnpL/zSTfX8c6bUTmn/ULgNgR83Ad+OEqh80k2NqmwewGwswJjohWDgAUKvaBgA7sQDxXcVQ/9xV
        NHOqWe9drxS2TI8OsXME2EcooyoU/hJ1Ks0UqWrCSarXLtIRhHnyOSow+keAgPq9vt4bGVdeS7NfANiB
        C5g5p8hHuPmfHd2hXMfMml3EHB1QX2/ZPOOyK3EBWKZf24lQ+5FrHqv5Z6RXCi82JC4Axx8ggvqBSuxE
        M68fZb9LZZcQULgL6JQkwks07/wy6pKO+WR2oYnB4Rc+3bIvNSQuAKM0K1yM+s8M8c40Mf9Gp+KznsQF
        YJJ+8xbH/Ocyov/6uZbvP9GSAACL1CJdDPVP+JJmIsO4zSRkRgwEADZKIavFNv/s0T87BOI7EwDYNOXW
        F8f8Mzt/2h625kl7gYBCWwF1n4kR/Uesojt/5n90pY0Vz6rHxMd3Ja0AG6YZEUJtgHcKzVxz5PE2al9X
        4gJsmC67hIf/LZs3DPSi+bAofu/4qT8BgEwpyXdWeAKL310T7JvEp/ZOXkozKybwh9FehVsBhYgZuBko
        QEA1z1gTXOxoeDXbPWiddSp0y9ErBCHOROErDBUhpP8OPRVRM2cbg+D3+jMivNI5qpK64EYzAduETiVd
        +Q4BgITp86ksCqJmROS7Gt+7PcAvxvKq4EXTRDH/jDeumEAAIFG64mxSQdSArcd8jE/nu84yGxy2Ysz8
        KVSJ0p+AgIoOJgCQJPWNNV/wPkcXTGe7sC7ozUT2DWIuu9BMu0OiCao3pkAAIFJaPJVDDaWAmjk7y8P4
        Qkz/Nw4ZbhL1/mKa2TpApPqPAAGlzNkCWAuX7mWFgqixq9lUkOI9bZFHlu49+rP7Gl4UT/2LpxIXIHpq
        kGutGt7adtSH7cL86R2TgGqcxTT/A7eKVv8pZlxBACBSCovit9C73aHvAtkuFKmY3A5/Mc0/k5k7IyqU
        AEBwWhImQEGUU/G0RRnNzN3iWCye+n8YoDsscGl4ESigBmwlABCUzDT+rFBM77hUNfulLA/xzP8kRqdy
        3cu6s34xBAACkneKWOpRp24cynZhyGZxZhQMZNT1YRuZ+xIrAwJYCjVztoj+GQHleXYDy+awWwbxGkbS
        S8wxhTXBhk1OJUDAXs2/EQhc8z6ZXeBiePrn3j12C4k1MmvmCLPuTUT1xx4CGIrUOkWyV1PDNhpHBb/0
        NNFnaPFtzEEgE01W7CGAnUALp0lQ//VU0jvul56GJ2P7do63Ml89728wXqkgCGAmzjEfidVfrZTmGZuN
        +goSOne3wh00ukgza0eZfQ7rWAA3cSjZsqJUhf+ec9XZEAR94rjI4EBdczTr/RUDAayE6XBARgBUq+bd
        L3/z1j911fntVRbkoHYxnEgjLiMKVL9YAgALaUqU7OqvVk7rFEOHYNSk07v/4zk0w2ECCtaxADaCHGlj
        I/VXq6fJ6SVhzBPB0abubZFOM9+Msma8EkcIYCNIo4s2F4Gqc2VrTa9+vqsDq2odi+n5iDH9rW054AcB
        TMT46DOb1n+Gipa/pzt0zTPv/Yt5LSbxTSIAMEqpakzUjwA5FuvUyzJeqDf504vf6mSK6UIIALRCYKN+
        qFkxtLOv8ZU3E2kmYgb/xSQ4bTyHweLQ0KVYLZZUJwcBAGjUhhfql18YrTvOcf/fXN47k6nP9vTDZkta
        mwMgOiRmkuBN3sQkTZfzAAA3mxieT2NsIz3oqCCZ1Sf7T1xOVgfjZ/4R1EzvmrRU/+w3o2imf4xwqR0o
        4gIAoEs8VuYfAByrtP8rmJ+d0oxJmLlfx3wbdLK/cJuFIB+PrSdtib55H2FX/1GzDO3B4C30OS9G3C7O
        xpSAXj9a61sBworSgeq+2+pp4xxSp+pI3yOLNv/M9QY1s/4EOpoct1oPANaOFs5pxHoEhap6edIAgLFm
        kFodQl/uFyvOTEJ8vl9us4w/E2j+tQMyl13EhkDQOgQILrjpVPXecvri3BniqH+p3peJ3llpy3UENsp2
        6SShRalVFIJ8V3HjiIXTECBI9zL2/ufdxVd/kar9AaCA+jqklgFAeFE2Oa073DRUzDU+O/siQHDMR8sx
        p5E2yxDj/UM2M9maITCbbT5pk0z7xor7gQezo/dWvlX7L9kXEFAH2tMXxq8UQ2b90cD2zAkwNlpeboMs
        vwsUR130uJ14EGicpT3IaNbhwH8ZnnnOv8VQv/6soE8MVj+8mlNLACBWbe1wgMmKAgEqZDXb6UOitP31
        FcwymESpUxUGAJPkBCY/3947Tjxzrd+W5guBukYOwDC5iND2dyo+725W/QgQUH1jOZexSJ164gPgVYgA
        DXRmvyiW+demPnH6J3b4q1Otf/91tBq9VuJ85c3EGNZtH8Xo+QfqHGMHk9i+plcRTIlSMgA6wCZ4AgiQ
        KQCI3PVL7TeKnYOjuU7SrJfX5nCX+PErEw59s7fdSdgN/dhus7SPQCSyTCWVi/YwYHuspNLcvT8nW5Q9
        DD8AOMJoYC7pYgWAoHV4rOlv2cYnD7dh3fmPcrmsTm1/oHP88PXh4Tv7ZtcYZCiruScT3oVXmA/t7GtJ
        4kgO6t+ZxFX9xnBhTS9hIk4AaASfguH0KRYAvLdcikWf2e5sp685bg+Yurh33BuH/He8vzhixt6u5zxM
        /ooyPbYU5kH1O69yWKYaaVH9pxgRRIsLltSvfaZzmkUIBOMBgDdgA5SzXDICwMH20oz8GfpM65PLdd/0
        sPj5zFr3BDZAWwRNT1t+PNKCKs9eZ95d8ARxoqK/LOZcAaNsD4BfTV4yAoAYH3dlswBf8tyjM9NzW8DM
        2QO2Nrx4+blWVedv6d1QFbe3+R/CAGCo/vO3udR/7ZOXHnCAwABbAwBxBcC4VZLUf6vX3BWpUtWLpvWP
        qXuZlqesutAv61mymXtKKgOQEADwV3/109cs5v5UHwJ8ilAlx6STQ+2GjeM3h2YqLGY5e+d55YuLt/cf
        Gb8r7Dh91jPrUcN3f+6c0zOzzw39+880obx/9y1tfmzQjWam5Ch9ceoo7VfHJkWM9hJYNn8+6tWS5s7f
        aexuzRu9VNAiJWNgP7M31YVEGARnbTYjiKsF4D+JItwooJq5p8+x17IBQYL+rYwhIcr5Sv3chhfdctxy
        GuTWzwXKvPXRWoCrel73egVCCAmxACWVzn/SdyUdsab20+/4MdGiBA+hF+YuQMh27EwAXP3rtWzGtQTD
        mwO2WVK1aQCUVIbF02cOp2nVxR8AJZVMWZft4aN+hBCinnP4BfegI8YAENb3xwRAwRO9awlsDywJa2/1
        EvMyVFJ5uojmp8Xr1MUXAPo1d2cSX/UjVFJ57iaH33AXfDEFwFWBGz6F6xVGfrnfYfMA0Mb341c2Pc09
        3zI98696TKuLHwBKKvcx9iDfd4i/+rVvm5DA4VeUgg+WADD1JW5+MYC2RmzcZx4A2pTYafh6txwuMLj8
        3LOA5vIe0bnxAYC+NZmQIEz9xtGJGQi0wg4AwvfjDGetE9crfk313cDlBT/1f2ubhS+LUe/vornUTKbC
        rAeAXuNt56Y+btfdkOB0HdwYaYZJWdKwA0CKtxQA0NKPjzzPzgpP4/Qh53VBXUztAUZ98R7dFTxnr359
        tRYAJZWZjK6jyV+IM4cwNEqv2RZm8s4LOAaBkgGg2gNQrVLXBOe5Wn5VsWNUaLMMw708l06ixwKY3p8P
        AEoqs0qYV759KIb6vw0yaLcrCwChURIDoLqYAraZ2hZaP30zimELqPnTEdAAyLljmId1ANBvsuWWiQAA
        6lA7o44bZQFAzFaAGQAgQEA1y/j0Ey7rbYpUUaGvH30zccug6l9RBgjQ13uNwzVrAKDf8j9xrqRyu0D1
        OxYfV7PMuVCYCxD4VT4rAFANg25714664mzVrygDBIgtWucOgJLKmYzRxAMpJZUICQIA5Zuk/bqJ1ACQ
        fHXw8fdBTlJnh8xKbHtl8JYsT2sem5AoJNPSFxmH142tGflI7eQvcBxBMzI5d2S7ZyADybA8fPV/QAPy
        kvrYtJ5WDZH8PJrKLX3BV/0FpyeM0HFH0339hKp/3sr9M+UqKhkA8J99/idkhwAAeKdac7d/lyPJOXet
        B8Hz+7duDfbTcYdPtOsjVP0xk1dskq+UZBkOPjEFKNn1r6ag297ssfSJaYuSR97zaHXN494rL1pd65Tb
        7MYb+Z3L6OsfBAMMPxjZsWlTK1Socb/Vo7eO+de+9qMEqV/TojR2ot8fspaT1EGglrYF8AsFrQ4CDUKp
        eR/RTIcDxteBapaRenGiXm+73+H0i5qKkkoOQSDVMQkidZxht6/VQSDVfTdLGRuS0loBOmIpfukBoLfU
        w9Su3mWopJJ6fvSk/tnfzuSX+9+w/HYdANwLDdsRVgKA+nABaxlLDADZ9ghKHG2LOADg03DdUbd7YxLY
        ZfBSqZ3b9Sp6tj3R+b7u3IBe7esF/tj0jGmpHTSnGPN1sloKM/6fL/3uC1uUj2wWgJ8bEGwBDJZ7sUlQ
        ptebn5rpTk9fDUCwYkLLNPZlXNq1w1oLcOmBcT+CFRaAMv6Gid25AAAw92EVCQHQbS/NrHzHWIIyo9HG
        zOujknUAQIBgdUjXvYajCNqNJLQAOHeTrRuJIwCo1ilnPc2UsT0BAMAGAEBAHWSs82+eYQkA1ZPEby/a
        A4woMNNz8lLPs9Xy16gfAUTqJpDxAoDF/cPtDAA/WvnFXlEAgOrn0kyOm6EEZSbn4gwpWjD9d71tG6KD
        +8WOXpvkS5/Z+IOpKR8cAEBNX2CxjO3MAsCHC6yBgDgAACo6mGYMl6iVmcwjAAECakz0kTamXjwjYv6f
        pp62CABKNxxVqwAAUOeK7ABADXKZ7CuFVgAAAQKqYxKz1uvSpYZAmV4YYhYAVL28k16cythemoE0ff+B
        /A3Cx/UnMTZnXjHPSgnUuUEjkzolJXXSP30kkOeWsZomt8o79CulT3wc0TLdJo1AWwBg8kkbjA2oY9+j
        mdn7WpRa/4bcoFGJnZISGbatyS1ev0Mz4uDNPswTA7Zt+FeJ18LptQQAACem1KmQP9ehm+njnybyUp06
        Nyg4vu3hDC8tO/Hk4GPP71ur/llrkz+m2e8CnQtTA0AN6jO9bGIC5I8BAADSWnILBcWKAbR+lxnM0V8J
        5RADGL0ppeZbg19lWNUKoOjPUiFAEFrzqTwHin1SmxEpPwjUErdvBIsKANT0tJ70/AHAgABEZv7BsR+A
        8jyb7sXsWejE+Gg181O0dh4Eamn59w0fyZ3nzSbh4TQ36ScBkYh6YMpv3trDni1u3uQwj0DTK/N2r/41
        scfqcT3PXhpFB5F1n9pGDzb8YETqW/KHgmtn0VPFYj53FhKJqAemnG7GGQKaj9efGc+oxlFzVum3IJrc
        qnUA6HZ/8VL5IfD2bppZOU9Q/urhB4pUnCCg+XL+t1/pmGRf95wdoYYNSFsBwGYxgJZ8jsoZA2g98b6u
        NONUzDMGQLrQbegc3bFhLLC9psvnmA/9SJiJLySvmFDLYgAtHRwhvw2YGEszh4cIyx+pu8zvk2LGCmje
        KCjvMLBIx/rHbA9l7zxSy10OtncBAABtKmZslBsCf7nQk0QGFs1cd1NQn0Qd919qPidnBAHNsF/zh+mY
        A77OhemmPjelqaUuAADMfjZaAheAwGCSSN4z/i4AUCQqqcwvVz3W8Rfu6hzBtw+Zn5lfZvYTGfXyatFY
        gCEdGyj/2MDIdfTxvni+KwK05KV6o15+zXSwzh4VVaUvAEpf3NpEB36Dtyxaam7coM1VW5U+BgDoce9z
        uVsD6uSg8+465vNhdx8IfWFdVc5d3XFr54LTR050vLHs71o+2ffVnGODzA8bNb5TiwEAsPQHnyKZs1SP
        3Usz7xYJswEAXiqPV2kIDPYb4l9WvUXch4tGJpV1tjRq2KZQhN/0ULEAsEVrQKPe11V3fKUPlS8uBAAA
        YMrwA4VPlyxBakt+uOSFSx8HxJ6Mbt5mQoD/M7WHuAWyfRCopZmz2YIkiYJABAiQa3XgJcbqYN0kspw7
        9BXu20NpKoT+Fv6bRGFiAQDWfd36mrw5PnVdMpXmLp8SagO0VuDyk03xfke+2Zf/pMcgrisFnj4XmPE9
        GAp8nSguFoB9MwkpLYCuOajbIURTIdQC8CWm3eCRBG0UiY0FAGhTsXyh3JFAD8bIwGcHhdsAfnRfSAj8
        CEZALv/HMQIAwMKdH2yVFQLqc93pj7j/PPrPMtv87rjbvB8th0Bhm0VjBQCArcvc78uaoTpsB80Mv2UL
        G1D64kd/no/+BaMF7hWOGwAAEsbI6wayukcf1h3f8L10Qn4IPH5W4c7rwUoIgt+E5o4dAPz/kNsNBAbT
        zIgB9x7I/YvL+dm8ShgnXP0YAgBg6zJ583OE5BSaG0fJbQMKLvB4qAregf3i/HoM6cgQOW1AU+c3/0Fz
        xT1v35UTAqUvtrjwUH8oJIgFfwwp8KrMbgBOFdDH3ZvKmfNLlB5o9UMfQKxY+asAS9q6zG1smWy5eanA
        x73ovo+Ozz8Ffb0El0wczOCSdyYEWV3/RZxPjSkAABLGBKTyXHnHCwLHPeiFf0P8NZXC31kBXCD80U+5
        Zm9zkPiXY+kCAAACNDPXyekGXq0/kbFbaOQBmeIAzfifbVvO2AIAYN3XjWRcOuKl+u9QmtseLE8o6H6/
        cxnYlDAGAMDBYZX35MvN2enEJZqTJxS03VQwRQCg340GX8rXJPNStWrvzhiWuZBadVPiLDVDDxMAmKUV
        VfceyAmBtMY0N3Kwa7nEhV+1ZDsBgAXq0ljO3NzqMTeO95N4smpLeXcFViYAAKKS5bQByxmh4MISr1Ip
        IfDmJQIADvR9cOk1+SDg7LTnEM2V+EmYlWb6ZgIATtSnjXx5eal6DWbyc1dJZQP+fmd4PgEAR5LTDQBk
        ltDH/9sgVW9Et3M4lKxCACCnG/BSNW0alkDz6z+WxAZoPsLAASgGAHK7gQiGG5h4slem+BBofmMkBiGg
        ggAA8MV++dxAgzq/HKQ55uYuYlH/k3iUqoIAsDGkKEc+N9BTLxSctVZkG6CZt5IAwGp6q8dfstkAJwdm
        c3DNGnHf3krTRd7Zz/YBAID3zshnA3oMYvJrPhXRBmi++g8uJaowAJwLKDgtFwQcHaZH0NysBA/RRiab
        3Ao5TwDAkwb7/flQnpy8VAWd1wbT/KLlYtX/qdvwKU/FAQCgb5VsNqBpePQBXx035Fdx3tro0fLvCAAE
        0NPGhdmyNQjV43fpDn/3Faf+r52FU2kKA8Bqk1dyAImSotlePqAXwGiRMkDQyMRPSIVMAHjiOnyjls/u
        LkaBN7k15bj9AGAubLKN2OGHpLYBSTAMngIAqA8NHb0WAODoYPur/yBwgwgAB9goWlW0Kp3K57oBCx/a
        j5z1NpLY1TOjGfs+f1Z9M4gavIVHGUuqS6EAAHCAH2RS+hPIYvKXHkil/lik4iyVNQBQFfIsYwkB4CiC
        CfkQdspirP4JQXCDZntXSuMGdkIoSPJiTcxkzMw/iNMKeAmhMkBgPfoJ3Ya3oWbNztPGV7PEh8AmmAwv
        JVH/4GMTzuAHAOEuQEtOEC+p+T8D1U4ZPmGez3ssrvHfyLYznxgugPJOEVzGmLoAnRUYD0mSofQujEPV
        e3qjbyCOvnDsiJjZrIQZVhY5V3KqKh6IYe0X0QIAADjDfklq/0vQ+9IW1IPfdYx7oXi1fwUv6ThZACqu
        t0hljK0FAACogLchVQKMLkR6W6GgJxACj7XHLs/EymQBfCZVHdN8sBVL7y+6BQAAcIXfRK7/CcDiliFE
        e+BZIE7t/4y3fBYtABW4WeQyFlWXYu8P8BSCIBneEu19RTAFsZQC2uewCuYC9C6CtsIz+Rg28K/ekGbi
        SgEAgEatOfxPbGu/UAtg+xQVirV4lDoV9xJU4Gggk6jWGAunUWuotzCWDwAUORzMpBP9ifprNQBuNcFV
        srrPlKB+hQOgWPXUFdf6H7VEGWXogJQhJysdbD8iD1cAoFbKKENFW4C0AHxly8fVNtkTAH4dgq1oaqSQ
        klU0AK62wVc2xyoCAMnpuQu+shEASE7nPHAOYB0IAKQm5CjfXsLEAmBI2V2xLlgCAKnpSjuMhdM4YCyc
        vQCgLc7StSIWQGrC2QUopf4rGgCPGmIMAIXUfwUDILfhM9ILUJsBUF4f50YgcQGSU6GPUiUnABCF8nxx
        lk45g+yKBcBLrCWvUky5KhYAxThPBwWlDAYrGACpA7AGgGLKUbEAeIhxLwAAAEUmhEhJWZ6YC6hWShSg
        UABUqnDuBQBQjhNQKAAye+IuIbEAkhLevQAEAJJTbkcCgFoNAJznA2vppQp3CRUNgErsi5dYAEkJ2zWB
        tAUgAJCOjiuglf0XWRomHWX1xL0XAOAJAYB0VOKFv4zEAkhIeR3wl/EmtltX2AEA0gLwl7HSmQBAIrro
        poQI2/MOAYBE9LAh/iEggOtTAgCJSPVCCVLWeaYEKRUJgDu4zwUAAIAn9QkAJKIzvZUg5WMCAKkop4sS
        pCT9ALXcApDBIMlIGd71BRkOloayPJUxzkYsgET03FkJvQDEAkhGOVjvDEQTmQ8gEV3qpAw5iQuQiB68
        SgBQqwGgjEYgAYBkdNdDGXKSWcGSUJGqQinj7GSbOCnoXHdlNAIBnBQxZqk4AJzwV4qkZKdQSai8gVIk
        JRZAEsrFflFoTcGSGEAKutxeMRaAAEAKUkoPO7EAklCGl1J62MkXQyShI4FKaQQqhxQFAOU4AND0OUMA
        IDqN2g8aZai/+7keClkY4hSpIAB4lZc2yPEGN7yV73vy7d0JnyqlTBX37eCrzimDAByqkCMC5Kjdjg05
        Mv8CIMZf5n/dPcA4U10Muv9V2mOHKgcWXvcXwEHvr/aKQxVyrPMs4Li3Yr4VoEgAEBKXFP3lUEIEAIQI
        AAgRABAiACBEAECIAIAQAQAhAgBCBACEONL/A2gHM2DvrdkoAAAAAElFTkSuQmCC
</value>
  </data>
</root>